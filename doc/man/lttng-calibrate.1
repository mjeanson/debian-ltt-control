'\" t
.\"     Title: lttng-calibrate
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 03/18/2016
.\"    Manual: LTTng Manual
.\"    Source: LTTng 2.8.0-rc1
.\"  Language: English
.\"
.TH "LTTNG\-CALIBRATE" "1" "03/18/2016" "LTTng 2\&.8\&.0\-rc1" "LTTng Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lttng-calibrate \- Quantify LTTng overhead
.SH "SYNOPSIS"
.sp
.nf
\fBlttng\fR [\fIGENERAL OPTIONS\fR] \fBcalibrate\fR
.fi
.SH "DESCRIPTION"
.sp
The \fBlttng calibrate\fR commands quantifies the overhead of LTTng tracers\&.
.sp
The \fBlttng calibrate\fR command can be used to find out the combined average overhead of the LTTng tracers and the instrumentation mechanisms used\&. This overhead can be calibrated in terms of time or using any of the PMU performance counter available on the system\&.
.sp
For now, the only implemented calibration is the Linux kernel function instrumentation (\fIkretprobes\fR)\&.
.SS "Calibrate Linux kernel function instrumentation"
.sp
As an example, we use an i7 processor with 4 general\-purpose PMU registers\&. This information is available by issuing \fBdmesg\fR, looking for \fBgeneric registers\fR\&.
.sp
The following sequence of commands gathers a trace executing a kretprobe hooked on an empty function, gathering PMU counters LLC (Last Level Cache) misses information (use \fBlttng add-context --list\fR to get the list of available PMU counters)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
lttng create calibrate\-function
lttng enable\-event calibrate \-\-kernel \e
                             \-\-function=lttng_calibrate_kretprobe
lttng add\-context \-\-kernel \-\-type=perf:cpu:LLC\-load\-misses \e
                           \-\-type=perf:cpu:LLC\-store\-misses \e
                           \-\-type=perf:cpu:LLC\-prefetch\-misses
lttng start

for a in $(seq 1 10); do
    lttng calibrate \-\-kernel \-\-function
done

lttng destroy
babeltrace $(ls \-1drt ~/lttng\-traces/calibrate\-function\-* | tail \-n 1)
.fi
.if n \{\
.RE
.\}
.sp
The output from \fBbabeltrace\fR(1) can be saved to a text file and opened in a spreadsheet (for example, in LibreOffice) to focus on the per\-PMU counter delta between consecutive \fBcalibrate_entry\fR and \fBcalibrate_return\fR events\&. Note that these counters are per\-CPU, so scheduling events would need to be present to account for migration between CPUs\&. Therefore, for calibration purposes, only events staying on the same CPU must be considered\&.
.sp
Here\(cqs an example of the average result, for the i7, on 10 samples:
.TS
allbox tab(:);
ltB ltB ltB.
T{
PMU counter
T}:T{
Average
T}:T{
Standard deviation
T}
.T&
lt lt lt
lt lt lt
lt lt lt.
T{
.sp
\fBperf_LLC_load_misses\fR
T}:T{
.sp
5\&.0
T}:T{
.sp
0\&.577
T}
T{
.sp
\fBperf_LLC_store_misses\fR
T}:T{
.sp
1\&.6
T}:T{
.sp
0\&.516
T}
T{
.sp
\fBperf_LLC_prefetch_misses\fR
T}:T{
.sp
9\&.0
T}:T{
.sp
14\&.742
T}
.TE
.sp 1
.sp
As we can notice, the load and store misses are relatively stable across runs (their standard deviation is relatively low) compared to the prefetch misses\&. We could conclude from this information that LLC load and store misses can be accounted for quite precisely, but prefetches within a function seems to behave too erratically (not much causality link between the code executed and the CPU prefetch activity) to be accounted for\&.
.SH "OPTIONS"
.sp
General options are described in \fBlttng\fR(1)\&.
.SS "Domain"
.sp
One of:
.PP
\fB-k\fR, \fB--kernel\fR
.RS 4
Quantify LTTng overhead in the Linux kernel domain\&.
.RE
.PP
\fB-u\fR, \fB--userspace\fR
.RS 4
Quantify LTTng overhead in the user space domain\&.
.RE
.SS "Calibration"
.PP
\fB--function\fR
.RS 4
Use dynamic function entry/return probes to calibrate (default)\&.
.sp
This option requires the
\fB--kernel\fR
option\&.
.RE
.SS "Program information"
.PP
\fB-h\fR, \fB--help\fR
.RS 4
Show command help\&.
.sp
This option, like
\fBlttng-help\fR(1), attempts to launch
\fB/usr/bin/man\fR
to view the command\(cqs man page\&. The path to the man pager can be overridden by the
\fBLTTNG_MAN_BIN_PATH\fR
environment variable\&.
.RE
.PP
\fB--list-options\fR
.RS 4
List available command options\&.
.RE
.SH "ENVIRONMENT VARIABLES"
.PP
\fBLTTNG_HOME\fR
.RS 4
Overrides the
\fB$HOME\fR
environment variable\&. Useful when the user running the commands has a non\-writable home directory\&.
.RE
.PP
\fBLTTNG_MAN_BIN_PATH\fR
.RS 4
Absolute path to the man pager to use for viewing help information about LTTng commands (using
\fBlttng-help\fR(1)
or
\fBlttng COMMAND --help\fR)\&.
.RE
.PP
\fBLTTNG_SESSION_CONFIG_XSD_PATH\fR
.RS 4
Path in which the
\fBsession.xsd\fR
session configuration XML schema may be found\&.
.RE
.PP
\fBLTTNG_SESSIOND_PATH\fR
.RS 4
Full session daemon binary path\&.
.sp
The
\fB--sessiond-path\fR
option has precedence over this environment variable\&.
.RE
.sp
Note that the \fBlttng-create\fR(1) command can spawn an LTTng session daemon automatically if none is running\&. See \fBlttng-sessiond\fR(8) for the environment variables influencing the execution of the session daemon\&.
.SH "EXIT STATUS"
.PP
\fB0\fR
.RS 4
Success
.RE
.PP
\fB1\fR
.RS 4
Command error
.RE
.PP
\fB2\fR
.RS 4
Undefined command
.RE
.PP
\fB3\fR
.RS 4
Fatal error
.RE
.PP
\fB4\fR
.RS 4
Command warning (something went wrong during the command)
.RE
.SH "BUGS"
.sp
If you encounter any issue or usability problem, please report it on the LTTng bug tracker: \fBhttps://bugs\&.lttng\&.org/projects/lttng\-tools\fR\&.
.SH "RESOURCES"
.sp
LTTng project website: \fBhttp://lttng\&.org\fR\&.
.sp
LTTng documentation: \fBhttp://lttng\&.org/docs\fR\&.
.sp
Git repositories: \fBhttp://git\&.lttng\&.org\fR\&.
.sp
Mailing list for support and development: \fBlttng-dev@lists.lttng.org\fR\&.
.sp
IRC channel: \fB#lttng\fR on \fBirc.oftc.net\fR (OFTC)\&.
.SH "COPYRIGHTS"
.sp
This program is part of the LTTng\-tools project\&.
.sp
LTTng\-tools is distributed under the GNU General Public License version 2\&. See the \fBLICENSE\fR file for details\&.
.SH "THANKS"
.sp
Special thanks to Michel Dagenais and the DORSAL laboratory at \('Ecole Polytechnique de Montr\('eal for the LTTng journey\&.
.sp
Also thanks to the Ericsson teams working on tracing which helped us greatly with detailed bug reports and unusual test cases\&.
.SH "AUTHORS"
.sp
LTTng\-tools was originally written by Mathieu Desnoyers, Julien Desfossez, and David Goulet\&. More people have since contributed to it\&.
.sp
LTTng\-tools is currently maintained by J\('er\('emie Galarneau (\fBjeremie\&.galarneau@efficios\&.com\fR)\&.
.SH "SEE ALSO"
.sp
\fBlttng\fR(1)
